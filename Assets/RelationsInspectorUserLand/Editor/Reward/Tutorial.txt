Reward/Loot graph

Intro
When giving a reward to the player, many games use variation. The easiest way to implement this is to select randomly from a set of reward items. This leads to an equal chance for each item to get picked. To make some items more rare than others, the random selection can consider a weight assigned to each reward item. These weights can be functions of the game state, so that items don't get rewarded twice or become more common over time or only appear in certain world regions etc.

Weights can also depend on which rewards the player got before. If you want to have some control over the order in which a player receives items, without giving up variaty, you can condition the item weights on past events, for example by turning them into a graph.

Breakout example
Let's say your breakout game gives rewards for destroyed blocks. 
public enum Reward { None, Point, Boost, ExtraLife }
Most of the time, no reward should be given. Points should occur more frequently than Boosts, and ExtraLife should be the rarest. So far, that's best represented as a list of (Reward, Weight) pairs. Lets say you don't want the player to get an ExtraLife from his first block. You want to prevent the game from giving out this item before the others. When your reward items form a graph, you can achieve that by not having a transition from the initial state to any ExtraLife-state.
